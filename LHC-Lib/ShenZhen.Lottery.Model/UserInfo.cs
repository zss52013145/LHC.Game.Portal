//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Text;
using ShenZhen.Lottery.Public;

namespace ShenZhen.Lottery.Model
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;

    [Serializable]
    public partial class UserInfo
    {

        public int Id { get; set; }
        public string TryId { get; set; }
        public string GUID { get; set; }
        public string UserName { get; set; }



        public string PassWord { get; set; }
        public string DownloadCode { get; set; }
        public string HeadImg { get; set; }

        public string PayWord { get; set; }
        public string NickName { get; set; }
        public int PId { get; set; }
        public bool IsDJ { get; set; }
        public int LoginCount { get; set; }         //登录次数

        public Nullable<System.DateTime> LastLoginTime { get; set; }
        public string LastLoginIp { get; set; }
        public int Type { get; set; }
        public System.DateTime SubTime { get; set; }
        public string SubIp { get; set; }
        public bool IsOnline { get; set; }
        public string Email { get; set; }
        public string RealName { get; set; }
        public string Mobile { get; set; }

        public decimal Money { get; set; }
        public decimal ElecMoney { get; set; } //电子游戏
        public decimal LotteryMoney { get; set; }
        public decimal MayaVideoMoney { get; set; }
        public decimal AGVideoMoney { get; set; }
        public decimal HappyMoney { get; set; }
        public decimal MGElecMoney { get; set; }
        public decimal ShabaMoney { get; set; }
        public double Rebates { get; set; }

        public int? GroupId { get; set; }

        public int ZhanChengRate { get; set; }

        public DlReport DlReport { get; set; }          //代理报表

        public string PanKou { get; set; }

        public int CreditLine { get; set; }           //信用额度


        //扩展字段

        public double ShowRebates
        {
            get
            {
                return this.Rebates * 1000;
            }
        }

        public string ShowZhanCheng
        {
            get
            {
                if (this.ZhanChengRate > 0)
                {
                    return this.ZhanChengRate * 10 + "%";
                }

                return "";
            }
        }

        public string ShowType
        {
            get
            {
                if (this.Type == 2)
                {
                    return "股东";
                }
                else if (this.Type == 3)
                {
                    return "总代理";
                }
                else if (this.Type == 4)
                {
                    return "代理";
                }
                else if (this.Type == 5)
                {
                    return "会员";
                }


                return "";
            }
        }

        public string ShowGroup
        {
            get
            {
                if (this.GroupId != null)
                {
                    UserGroup ug = Util.GetEntityById<UserGroup>((int)GroupId);

                    if (ug != null)
                    {
                        return ug.Name;
                    }

                }

                return "默认组";
            }
        }


        public string ShowMobile
        {
            get
            {
                if (!string.IsNullOrEmpty(this.Mobile))
                {
                    return this.Mobile.Substring(0, 8) + "***";
                }
                else
                {
                    return "";
                }
            }
        }

        //方法
        public string GetNextIds(int pid)
        {

            try
            {

                if (pid == 0) return "";

                string result = "";

                result += pid + ",";

                UserInfo user = Util.GetEntityById<UserInfo>(pid);

                if (user.Type == 1)
                {

                    string sql = "select Id from userinfo where pid = " + pid;

                    List<UserInfo> list = Util.ReaderToList<UserInfo>(sql);

                    foreach (UserInfo u in list)
                    {
                        if (user.Type == 2)
                        {
                            result += u.Id + ",";
                        }
                        else
                        {
                            result += GetNextIds(u.Id) + ",";
                        }
                    }
                }


                return result.TrimEnd(',');

            }
            catch (Exception ex)
            {
                return "";
            }


        }


        public int NextAllCount
        {
            get
            {
                string s = GetNextIds(this.Id);

                return s.Split(',').Length - 1;
            }
        }


        public decimal NextAllMoney
        {
            get
            {
                string s = GetNextIds(this.Id);

                if (s == "") return 0;

                string sql = "select sum(money) from userinfo where Id in (" + s + ")";

                return Convert.ToDecimal(SqlHelper.ExecuteScalarForFenZhan(77, sql));
            }
        }

        public int NextCount
        {
            get
            {
                string sql = "select count(1) from UserInfo where PId=" + this.Id;
                return Util.SqlToInt(sql);

            }
        }

        public string ShowState
        {
            get
            {
                if (IsDJ)
                {
                    return "冻结";
                }
                else
                {
                    return "正常";
                }
            }
        }

        public string ShowTime
        {
            get
            {
                return this.SubTime.ToString("yyyy-MM-dd HH:mm:ss");
            }
        }

        public string ShowLastLoginTime
        {
            get
            {
                if (LastLoginTime != null)
                {
                    return ((DateTime)LastLoginTime).ToString("yyyy-MM-dd HH:mm:ss");
                }
                return "";
            }
        }

        public string DirectTop
        {
            get
            {
                if (this.PId == null)
                {
                    return "";
                }
                else
                {
                    string sql = "select UserName from UserInfo where Id=" + this.PId;
                    object o = SqlHelper.ExecuteScalar(sql);

                    if (o != DBNull.Value && o != null)
                    {
                        return o.ToString();
                    }
                    else
                    {
                        return "";
                    }
                }
            }
        }



        //public int Type2Id
        //{
        //    get
        //    {

        //        string sql = "select * from UserInfo where Id = " + this.PId;
        //        var pUser = Util.ReaderToModel<UserInfo>(sql);

        //        while (pUser.PId != 0)
        //        {
        //            sql = "select * from UserInfo where Id = " + pUser.PId;
        //            pUser = Util.ReaderToModel<UserInfo>(sql);
        //        }

        //        return pUser.Id;
        //    }
        //}

        //public int Type3Id
        //{
        //    get
        //    {

        //        string sql = "select * from UserInfo where Id = " + this.PId;
        //        var pUser = Util.ReaderToModel<UserInfo>(sql);

        //        while (pUser.PId != 2)
        //        {
        //            sql = "select * from UserInfo where Id = " + pUser.PId;
        //            pUser = Util.ReaderToModel<UserInfo>(sql);
        //        }

        //        return pUser.Id;
        //    }
        //}



        //public int Type4Id
        //{
        //    get
        //    {

        //        string sql = "select * from UserInfo where Id = " + this.PId;
        //        var pUser = Util.ReaderToModel<UserInfo>(sql);

        //        while (pUser.PId != 3)
        //        {
        //            sql = "select * from UserInfo where Id = " + pUser.PId;
        //            pUser = Util.ReaderToModel<UserInfo>(sql);
        //        }

        //        return pUser.Id;
        //    }
        //}



        //会员类型
        public string ShowUserType
        {
            get
            {
                if (this.PId != null && this.Type == 5)
                {
                    string sql = "select * from UserInfo where Id=" + this.PId;

                    UserInfo pUser = Util.ReaderToModel<UserInfo>(sql);

                    if (pUser.Type == 2)
                    {
                        return "直属股东";
                    }
                    else if (pUser.Type == 3)
                    {
                        return "直属总代理";
                    }
                    else if (pUser.Type == 4)
                    {
                        return "普通会员";
                    }
                }

                return "";
            }
        }

        //下级代理个数
        public int NextProxyCount
        {
            get
            {
                if (this.Type == 3)
                {
                    string sql = "select count(1) from UserInfo where PId=" + Id + " and  Type = 4";

                    return Util.GetCountByDataBase(sql);
                }

                return 0;
            }
        }


        //下级会员个数
        public int NextUserCount
        {
            get
            {
                if (this.Type == 3)
                {
                    string sql = "select count(1) from UserInfo where PId=" + Id + " and  Type = 5";

                    return Util.GetCountByDataBase(sql);
                }

                return 0;
            }
        }

        public int ShowRechargeMoney
        {
            get
            {
                string sql = "select Sum(Money) from ComeOutRecord where Type = 1 and State = 3 and UserId=" + Id;

                object o = SqlHelper.ExecuteScalar(sql);
                if (o != DBNull.Value && o != null)
                {
                    return (int)o;
                }

                return 0;
            }
        }


        public object ShowProxyTodaySy
        {
            get
            {
                if (this.UserName == "试玩账号") return 0;


                string sql = "select Id from UserInfo where PId = " + this.Id;
                string ids = "";
                using (SqlDataReader reader = SqlHelper.ExecuteReader(sql))
                {
                    while (reader.Read())
                    {
                        ids += reader["Id"] + ",";
                    }
                }

                ids = ids.TrimEnd(',');

                string time = DateTime.Now.ToString("yyyy-MM-dd");

                sql = "select sum(WinMoney + TuiShui - UnitMoney * BetCount) from BettingRecord where UserId in (" + ids + ") and SubTime > '" + time + "'";

                return SqlHelper.ExecuteScalar(sql) == DBNull.Value ? 0 : SqlHelper.ExecuteScalar(sql);

            }
        }

        public object ShowProxyWeekSy
        {
            get
            {
                if (this.UserName == "试玩账号") return 0;


                string sql = "select Id from UserInfo where PId = " + this.Id;
                string ids = "";
                using (SqlDataReader reader = SqlHelper.ExecuteReader(sql))
                {
                    while (reader.Read())
                    {
                        ids += reader["Id"] + ",";
                    }
                }

                ids = ids.TrimEnd(',');

                string time = DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd");

                sql = "select sum(WinMoney + TuiShui - UnitMoney * BetCount) from BettingRecord where UserId in (" + ids + ") and SubTime > '" + time + "'";

                return SqlHelper.ExecuteScalar(sql) == DBNull.Value ? 0 : SqlHelper.ExecuteScalar(sql);

            }
        }


        public string ShowRealNameWithStar
        {
            get
            {
                if (string.IsNullOrEmpty(this.RealName))
                {
                    return "";
                }

                return "*" + this.RealName.Substring(1);
            }
        }

        public string ShowMobileWithStar
        {
            get
            {

                if (string.IsNullOrEmpty(this.Mobile) || this.Mobile.Length != 11)
                {
                    return "";
                }

                return this.Mobile.Substring(0, 3) + "****" + this.Mobile.Substring(7, 4);
            }
        }



        public string ShowUserName
        {

            get
            {

                if (!string.IsNullOrEmpty(NickName))
                {
                    return NickName;
                }

                //zss588

                int len = UserName.Length;


                //6
                int liangbian = (len - 2) / 2;


                string result = UserName.Substring(0, liangbian) + "**" + UserName.Substring(liangbian + 2);


                return result;

            }
        }


        public string ShowOnLineState
        {

            get
            {
                string sql = "select count(1) from BettingRecordDay where UserId = " + this.Id + " and SubTime > '" + DateTime.Now.AddMinutes(-30).ToString() + "'";


                object obj = SqlHelper.ExecuteScalarForFenZhan(77, sql);


                if (obj != DBNull.Value)
                {
                    int count = Convert.ToInt32(obj);

                    if (count >= 1) return "在线";

                }



                return "离线";

            }
        }


        public string ShowNameWithStar
        {
            get
            {

                if (!string.IsNullOrEmpty(this.NickName))
                {

                    if (this.NickName.Length == 1) return this.NickName;

                    return Util.GetStarName(this.NickName);
                }
                else
                {
                    return Util.GetStarName(this.UserName);
                }

            }
        }
    }
}
